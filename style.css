
* {
  box-sizing: border-box;
}


html {
  background-color: #fff;
  font-size: 16px;
  min-width: 300px;
  overflow-x: hidden;
  overflow-y: scroll;

  /* these are specific to different browsers */
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  text-size-adjust: 100%;
}

body {
  margin: 0;
  padding: 0;

  font-family: ‘Segoe UI’, Candara, ‘Bitstream Vera Sans’, ‘DejaVu Sans’, ‘Bitsream Vera Sans’, ‘Trebuchet MS’, Verdana, ‘Verdana Ref’, sans-serif;
  font-weight: 400;
  line-height: 1.5;
  background-color: rgb(255, 255, 255);
}

a {
  display: inline-block;
  text-decoration: none;
}

h2, h3 {
  color:rgb(255, 255, 255)
}

form {
  accent-color: hsla(120, 100%, 50%, 0.482);
}

.wrapper {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  margin: 0;
  flex: 1;
}

.header {
  padding-bottom: 1.5rem;
  z-index: 1;
}


.header h1 {
  display: block;
  /* this will push other blocks out of the way */
  
  /* colors */
  background-color: #000000;
  color: #FFFFFF;
  /* shapes */
  font-size: 1.5rem;
  padding: 1.25rem;
  margin:0; /* removing the margin on h1 tags means the header pins to the top if we move */


  /* box-shadows are fancy */
}

.header img {
  width: 75px;
  height: 75px;
  margin-left: auto;
  margin-right: auto;
  display: block;
  position: relative;
  top: -75px;
}

.container {
  position: absolute;
  top: 1.8em;;
  right: 5em;
  z-index: 2;

}

select {
  box-shadow: 0 10px 25px rgba(0, 0, 0, .2);
  font-size: 1em;
  padding: .25em 1.5em;
  background-color: #4d5061;
  color: white;
}

.custom-select{
  position: relative;
}



/*
  Rules can be combined on a block to apply the 'cascade' in order
  So you can use two classnames in a single class attribute
  like: <div class="box section">

  Rules may combine in unexpected ways - remember that the LAST thing written in this file will have "priority"
  And will be what displays in your client
*/

/* Deploy this with images as direct "children" and the images should pop into shape */

/*
Form Styles
*/

form input {
    /* This is a hack to make sure our boxes line up with one another nicely */
    width: 100%;
    width: -moz-available;          /* WebKit-based browsers will ignore this. */
    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */
    width: fill-available;

    /* here we are setting white space correctly */
    margin-bottom: 1rem;
    height: 2rem;
    border-radius: 4px;
  }

  form label {
    width: 100%;
    width: -moz-available;          /* WebKit-based browsers will ignore this. */
    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */
    width: fill-available;
    align-items: flex-start;

    display: block; /* this turns the label text into a box we can set margins on */
    margin-bottom: 0.5rem;
  }

/* How To Write A Media Query For Small Screens */

@media only screen and (max-width: 736px){
  /* Rules in here will only apply when a screen is the correct size */
  /* check it out by using your developer tools to shrink your screen-size */
  .container {
    background-color: rgba(119, 119, 119, 0.65);
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    width:100%
  }
}

#map {
height: 100%;
width: 100%;
position:absolute;
top: 0;
left: 0;
z-index: 1;
}

    